/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Book;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-13T13:51:03.717955700+02:00[Europe/Warsaw]")
@Validated
@Api(value = "books", description = "the books API")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /books : Create a new book
     *
     * @param book The book to create (required)
     * @return The created book (status code 201)
     */
    @ApiOperation(value = "Create a new book", nickname = "createBook", notes = "", response = Book.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created book", response = Book.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> createBook(@ApiParam(value = "The book to create" ,required=true )  @Valid @RequestBody Book book) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pages\" : 1, \"visitCount\" : 5, \"author\" : \"author\", \"price\" : 6.0274563, \"genre\" : \"genre\", \"available\" : true, \"id\" : 0, \"title\" : \"title\", \"stock\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /books/{id} : Delete a book by ID
     *
     * @param id  (required)
     * @return Book deleted (status code 204)
     */
    @ApiOperation(value = "Delete a book by ID", nickname = "deleteBookById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Book deleted") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/books/{id}"
    )
    default ResponseEntity<Void> deleteBookById(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/{id} : Get a book by ID
     *
     * @param id  (required)
     * @return The book (status code 200)
     */
    @ApiOperation(value = "Get a book by ID", nickname = "getBookById", notes = "", response = Book.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The book", response = Book.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Book> getBookById(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pages\" : 1, \"visitCount\" : 5, \"author\" : \"author\", \"price\" : 6.0274563, \"genre\" : \"genre\", \"available\" : true, \"id\" : 0, \"title\" : \"title\", \"stock\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books : Get all books
     *
     * @return A list of books (status code 200)
     */
    @ApiOperation(value = "Get all books", nickname = "getBooks", notes = "", response = Book.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of books", response = Book.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Book>> getBooks() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pages\" : 1, \"visitCount\" : 5, \"author\" : \"author\", \"price\" : 6.0274563, \"genre\" : \"genre\", \"available\" : true, \"id\" : 0, \"title\" : \"title\", \"stock\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /books/{id} : Update a book by ID
     *
     * @param id  (required)
     * @param book The book to update (required)
     * @return The updated book (status code 200)
     */
    @ApiOperation(value = "Update a book by ID", nickname = "updateBookById", notes = "", response = Book.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated book", response = Book.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/books/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> updateBookById(@ApiParam(value = "",required=true) @PathVariable("id") Integer id,@ApiParam(value = "The book to update" ,required=true )  @Valid @RequestBody Book book) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pages\" : 1, \"visitCount\" : 5, \"author\" : \"author\", \"price\" : 6.0274563, \"genre\" : \"genre\", \"available\" : true, \"id\" : 0, \"title\" : \"title\", \"stock\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
